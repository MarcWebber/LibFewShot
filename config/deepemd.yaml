augment: true
augment_method: null
augment_times: 1
augment_times_query: 1
way_num: 5
shot_num: 1
query_num: 15
episode_size: 2
train_episode: 2000
test_episode: 600

 
batch_size: 128
classifier:
  kwargs:
    feat_dim: 64
    lambda_epi: 0.25
    num_classes: 200
    temperature: 0.2
    temperature_attn: 5.0
    mode: meta
    args:
      norm: center
      way: 5
      shot: 1
      query: 15
      deepemd: fcn
      solver: opencv
      num_patch: 9
      sfc_lr: 0.1
      sfc_bs: 4
      temperature: 12.5
      form: L2
      metric: cosine
      l2_strength: 0.000001

  name: DeepEMD
  
  
data_root: ./data/fewshot/miniImageNet--ravi
deterministic: true
device_ids: 0
episode_size: 1
epoch: 100
image_size: 84
includes:
  - headers/data.yaml
  - headers/device.yaml
  - headers/misc.yaml
  - headers/model.yaml
  - headers/optimizer.yaml
  - classifiers/DeepEMD.yaml
  - backbones/resnet12.yaml
log_interval: 100
log_level: info
log_name: null
log_paramerter: false
lr_scheduler:
  kwargs:
    T_max: 100
    eta_min: 0
  name: CosineAnnealingLR
n_gpu: 1

#optimizer = torch.optim.SGD([{'params': model.module.encoder.parameters(), 'lr': args.lr},
#                             {'params': model.module.fc.parameters(), 'lr': args.lr}
#                             ], momentum=0.9, nesterov=True, weight_decay=0.0005)
optimizer:
  kwargs:
    lr: 0.1
    momentum: 0.9
    nesterov: true
    weight_decay: 0.0005
  name: SGD
  other:
    emb_func: 0.1

parallel_part:
  - emb_func
pretrain_path: results/deepemd_pretrain_model/miniimagenet/resnet12/max_acc.pth

# other parmas are listed below
#     parser.add_argument('-way', type=int, default=5)
#    parser.add_argument('-shot', type=int, default=1)
#    parser.add_argument('-query', type=int, default=15)  # number of query image per class
#    parser.add_argument('-dataset', type=str, default='miniimagenet', choices=['miniimagenet', 'cub','tieredimagenet','fc100','tieredimagenet_yao','cifar_fs'])
#    parser.add_argument('-set', type=str, default='test', choices=['train','val', 'test'])
#    # about model
#    parser.add_argument('-temperature', type=float, default=12.5)
#    parser.add_argument('-metric', type=str, default='cosine', choices=[ 'cosine' ])
#    parser.add_argument('-norm', type=str, default='center', choices=[ 'center'])
#    parser.add_argument('-deepemd', type=str, default='fcn', choices=['fcn', 'grid', 'sampling'])
#    #deepemd fcn only
#    parser.add_argument('-feature_pyramid', type=str, default=None)
#    #deepemd sampling only
#    parser.add_argument('-num_patch',type=int,default=9)
#    #deepemd grid only patch_list
#    parser.add_argument('-patch_list',type=str,default='2,3')
#    parser.add_argument('-patch_ratio',type=float,default=2)
#    # solver
#    parser.add_argument('-solver', type=str, default='opencv', choices=['opencv'])
#    # SFC
#    parser.add_argument('-sfc_lr', type=float, default=100)
#    parser.add_argument('-sfc_wd', type=float, default=0, help='weight decay for SFC weight')
#    parser.add_argument('-sfc_update_step', type=float, default=100)
#    parser.add_argument('-sfc_bs', type=int, default=4)
#    # others
#    parser.add_argument('-test_episode', type=int, default=5000)
#    parser.add_argument('-gpu', default='0,1')
#    parser.add_argument('-data_dir', type=str, default=DATA_DIR)
#    parser.add_argument('-model_dir', type=str, default=MODEL_DIR)
#    parser.add_argument('-seed', type=int, default=1)
query_num: 15
result_root: ./results
resume: false
save_interval: 10
save_part:
  - emb_func
seed: 0
shot_num: 1
tag: null
tb_scale: 1.5
test_episode: 200
test_epoch: 5
test_query: 15
test_shot: 1
test_way: 5
train_episode: 300
use_memory: false
way_num: 5
dataloader_num: 2